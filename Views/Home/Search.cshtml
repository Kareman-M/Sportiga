
@{
    ViewData["Title"] = "Search";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section style{
    <style>
        * {
            box-sizing: border-box;
            padding: 0;
            margin: 0;
        }
        .customactive {
            background: #000;
            color: #fff;
        }
        .breadcrumb {
            display: flex;
            flex-wrap: wrap;
            padding: .75rem 1rem;
            margin-bottom: 1rem;
            list-style: none;
            background-color: #e9ecef;
            border-radius: 0;
        }

        .rtl .breadcrumb-item + .breadcrumb-item, [dir=rtl] .breadcrumb-item + .breadcrumb-item {
            padding-right: .5rem;
            padding-left: 0;
            color: #6c757d;
            content: "/";
        }

        li {
            display: list-item;
            text-align: -webkit-match-parent;
        }

        .rtl .breadcrumb-item + .breadcrumb-item::before, [dir=rtl] .breadcrumb-item + .breadcrumb-item::before {
            padding-right: 0;
            padding-left: .5rem;
        }

        .breadcrumb-item + .breadcrumb-item::before {
            display: inline-block;
            padding-right: .5rem;
            color: #6c757d;
            content: "/";
        }

        .block .title {
            float: right;
            width: 100%;
            padding: 8px 10px;
            position: relative;
            padding-right: 25px;
        }

            .block .title:after {
                content: "";
                position: absolute;
                right: 0;
                width: 100%;
                top: 48%;
                height: 2px;
                background: linear-gradient(to right,#3B4764 0%,#293144 100%);
            }
    </style>
}

<section class="cat-nav">
    <div class="container">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/" title="">الرئيسية</a></li>
            <li class="breadcrumb-item active" aria-current="page"> @ViewBag.Word</li>
        </ol>
    </div>
</section>

<section class="articles">
    <div class="container">
        <div class="block">
            <div class="title">
                <a href="" title="@ViewBag.Word"><h2>@ViewBag.Word</h2></a>
            </div>
            <div class="content">
                <div class="row" id="t1">
                    @foreach (var item in ViewBag.Articles)
                    {
                        <div class="col-sm-6 col-md-4 item">
                            <div class="item-card">
                                <a href="/Home/essay/@item.ID">
                                    <div class="content-img">
                                        <img class=" lazyloaded" src="~/images/@item.Image" data-src="~/images/@item.Image" width="740" height="416" alt="@item.Title">
                                    </div>
                                    <div class="content-text">
                                        <h3>@item.Title</h3>
                                    </div>
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>



@section script{
    <script>
        /**
 * Sets a CSS style on the selected element(s) with !important priority.
 * This supports camelCased CSS style property names and calling with an object
 * like the jQuery `css()` method.
 * Unlike jQuery's css() this does NOT work as a getter.
 *
 * @@param {string|Object<string, string>} name
 * @@param {string|undefined} value
 */
jQuery.fn.cssImportant = function(name, value) {
  const $this = this;
  const applyStyles = (n, v) => {
    // Convert style name from camelCase to dashed-case.
    const dashedName = n.replace(/(.)([A-Z])(.)/g, (str, m1, upper, m2) => {
      return m1 + "-" + upper.toLowerCase() + m2;
    });
    // Loop over each element in the selector and set the styles.
    $this.each(function(){
      this.style.setProperty(dashedName, v, 'important');
    });
  };
  // If called with the first parameter that is an object,
  // Loop over the entries in the object and apply those styles.
  if(jQuery.isPlainObject(name)){
    for(const [n, v] of Object.entries(name)){
       applyStyles(n, v);
    }
  } else {
    // Otherwise called with style name and value.
    applyStyles(name, value);
  }
  // This is required for making jQuery plugin calls chainable.
  return $this;
};

        $(document).ready(function () {
            $('#t1').after('<div id="nav" class="text-center"></div>');
            var rowsShown = 120;
            var rowsTotal = $('#t1 .item').length;
            var numPages = rowsTotal / rowsShown;
            for (i = 0; i < numPages; i++) {
               var pageNum = i + 1;
               $('#nav').append('<a href="#" class=""  rel="' + i + '">&emsp;' + pageNum + '&emsp;</a> ');
            }
            
            $('#t1 .item').cssImportant('display', 'none').hide();
            $('#t1 .item').slice(0, rowsShown).cssImportant('display', 'block').show();
            $('#nav a:first').addClass('customactive');
            $('#nav a').bind('click', function (e) {
                e.preventDefault();
                $('#nav a').removeClass('customactive');
                $(this).addClass('customactive');
                var currPage = $(this).attr('rel');
                var startItem = currPage * rowsShown;
                var endItem = startItem + rowsShown;
                //$('#t1 .item').attr('style', 'display:none !important')

                $('#t1 .item').cssImportant('display', 'none').hide().slice(startItem, endItem).
                    css('display', 'flex').animate({
                        display: 'block'
                    }, 300);
            });
        });
    </script>

}
